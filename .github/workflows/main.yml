name: Node.js CI

on:
  push:
    branches: [main]
    paths-ignore:
      - "**.md"
      - "terraform/**"
  pull_request:
    branches: [main]
    paths-ignore:
      - "**.md"
      - "terraform/**"
  workflow_dispatch:

env:
  CLONE_PATH: ${{ vars.NODEJS_DIR }}/${{ vars.CLONE_DIR }}
  DEPLOY_PATH: ${{ vars.NODEJS_DIR }}/${{ vars.DEPLOY_DIR }}
  REPO_URL: ${{ github.server_url }}/${{ github.repository }}.git

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-latest]
        node-version: [18.x, 20.x]

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install Dependencies
        run: npm ci

      - name: Build
        run: npm run build --if-present

      - name: Run Tests
        run: npm test

  deploy:
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Deploy NodeJS App
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ vars.DIGITALOCEAN_HOSTNAME }}
          key: ${{ secrets.DIGITALOCEAN_PRIVATE_SSH_KEY }}
          username: ${{ secrets.DIGITALOCEAN_USERNAME }}
          envs: CLONE_PATH,DEPLOY_PATH,REPO_URL
          script: |
            set -eox pipefail

            echo "Clone path is: ${CLONE_PATH}"
            echo "Deploy path is: ${DEPLOY_PATH}"
            echo "Repo path is: ${REPO_URL}"

            rm -rf "$CLONE_PATH"
            git clone "$REPO_URL" "$CLONE_PATH"

            mkdir -p "$DEPLOY_PATH/.git/hooks"

            rsync -ac --delete --exclude .git "$CLONE_PATH/" "$DEPLOY_PATH"
            chown -R nodejs:nodejs "$DEPLOY_PATH"

      - name: Start NodeJS App
        if: success()
        uses: appleboy/ssh-action@v1.0.0
        # env:
        #   CLONE_PATH: ${{ vars.CLONE_DIR }}
        #   DEPLOY_PATH: ${{ vars.DEPLOY_DIR }}
        with:
          host: ${{ vars.DIGITALOCEAN_HOSTNAME }}
          key: ${{ secrets.DIGITALOCEAN_PRIVATE_SSH_KEY }}
          username: ${{ secrets.DIGITALOCEAN_USERNAME }}
          envs: CLONE_PATH,DEPLOY_PATH
          script: |
            set -eox pipefail

            cd "$DEPLOY_PATH"

            sudo -u nodejs npm ci
            sudo -u nodejs pm2 delete hello || true
            sudo -u nodejs pm2 start ecosystem.config.js --watch
            sudo -u nodejs pm2 save

            rm -rf "$CLONE_PATH"

      - name: Update Twilio Webhook URLs
        if: success()
        env:
          TWILIO_ACCOUNT_SID: ${{ secrets.TWILIO_ACCOUNT_SID }}
          TWILIO_AUTH_TOKEN: ${{ secrets.TWILIO_AUTH_TOKEN }}
          HOST: ${{ vars.DIGITALOCEAN_HOSTNAME }}
        run: |
          BASE_URL="http://${HOST}"
          API_URL="https://api.twilio.com/2010-04-01/Accounts/${TWILIO_ACCOUNT_SID}/IncomingPhoneNumbers"

          post_voice_url() {
            local phone_number="$1"
            local voice_url="$BASE_URL/$2"
            local sid=$(curl -s -XPOST "${API_URL}.json" --data-urlencode "PhoneNumber=$phone_number" -u $TWILIO_ACCOUNT_SID:$TWILIO_AUTH_TOKEN | jq -r .sid)
            curl -s -XPOST "${API_URL}/${sid}.json" --data-urlencode "VoiceUrl=${voice_url}" -u "$TWILIO_ACCOUNT_SID:$TWILIO_AUTH_TOKEN"
          }

          post_voice_url "+1269BakerSt" "call/baker"
          post_voice_url "+191Freebird" "call/freebird"
          post_voice_url "+1662GetItOn" "call/getiton"
          post_voice_url "+1660DeepTht" "ivr/welcome"

      - name: Cleanup Deployment
        if: always()
        uses: appleboy/ssh-action@v1.0.0
        # env:
          # CLONE_PATH: ${{ vars.CLONE_DIR }}
        with:
          host: ${{ vars.DIGITALOCEAN_HOSTNAME }}
          key: ${{ secrets.DIGITALOCEAN_PRIVATE_SSH_KEY }}
          username: ${{ secrets.DIGITALOCEAN_USERNAME }}
          envs: CLONE_PATH
          script: |
            set -eox pipefail

            rm -rf "$CLONE_PATH"
