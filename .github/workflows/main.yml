name: Node.js CI

on:
  push:
    branches: [main]
    paths-ignore:
      - "**.md"
      - "terraform/**"
  pull_request:
    branches: [main]
    paths-ignore:
      - "**.md"
      - "terraform/**"
  workflow_dispatch:

env:
  CLONE_PATH: ${{ vars.NODEJS_DIR }}/${{ vars.CLONE_DIR }}
  DEPLOY_PATH: ${{ vars.NODEJS_DIR }}/${{ vars.DEPLOY_DIR }}
  REPO_URL: ${{ github.server_url }}/${{ github.repository }}.git

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-latest]
        node-version: [18.x]

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install Dependencies
        run: npm ci

      - name: Build
        run: npm run build --if-present

      - name: Run Tests
        run: npm test

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Tag and Push Docker Image
        uses: docker/build-push-action@v4
        with:
          # file: ./Dockerfile
          tags: rodstewart/twilio-apps:latest
          push: true
          cache-from: gha
          cache-to: type=gha,mode=max

      # - name: Publish to Registry
      #   uses: elgohr/Publish-Docker-Github-Action@v5
      #   with:
      #     name: rodstewart/twilio-apps
      #     username: ${{ secrets.DOCKER_USERNAME }}
      #     password: ${{ secrets.DOCKER_PASSWORD }}
      #     default_branch: main
      #     tags: latest

  deploy:
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Start Docker
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ vars.DIGITALOCEAN_HOSTNAME }}
          key: ${{ secrets.DIGITALOCEAN_PRIVATE_SSH_KEY }}
          username: ${{ secrets.DIGITALOCEAN_USERNAME }}
          envs: CLONE_PATH,DEPLOY_PATH,REPO_URL
          script: |
            set -eox pipefail

            docker pull rodstewart/twilio-apps:latest
            docker rm twilio_apps -f
            docker run --name twilio_apps -dit --restart unless-stopped -p 80:3000 rodstewart/twilio-apps:latest

      - name: Update Twilio Webhook URLs
        if: success()
        env:
          TWILIO_ACCOUNT_SID: ${{ secrets.TWILIO_ACCOUNT_SID }}
          TWILIO_AUTH_TOKEN: ${{ secrets.TWILIO_AUTH_TOKEN }}
          HOST: ${{ vars.DIGITALOCEAN_HOSTNAME }}
          # API_URL: ${{ vars.TWILIO_API_URL }}
          API_URL: "${{ vars.TWILIO_API_URL }}/${{ secrets.TWILIO_ACCOUNT_SID }}"
        run: |
          BASE_URL="http://${HOST}"
          INCOMING_API_URL="${API_URL}/IncomingPhoneNumbers"

          echo $INCOMING_API_URL

          declare -A numbers=(
            ["+1269BakerSt"]="call/baker"
            ["+191Freebird"]="call/freebird"
            ["+1662GetItOn"]="call/getiton"
            ["+1660DeepTht"]="ivr/welcome"
          )

          post_voice_url() {
            local phone_number="$1"
            local voice_url="${BASE_URL}/$2"
            local sid=$(curl -s -XPOST "${INCOMING_API_URL}.json" --data-urlencode "PhoneNumber=$phone_number" -u $TWILIO_ACCOUNT_SID:$TWILIO_AUTH_TOKEN | jq -r .sid)
            curl -s -XPOST "${INCOMING_API_URL}/${sid}.json" --data-urlencode "VoiceUrl=${voice_url}" -u "$TWILIO_ACCOUNT_SID:$TWILIO_AUTH_TOKEN"
          }

          for key in ${!numbers[@]}; do
            post_voice_url $key ${numbers[$key]}
          done
